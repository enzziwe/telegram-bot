import logging
import json
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ContextTypes, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class Database:
    def __init__(self, filename='data.json'):
        self.filename = filename
        self._ensure_file_exists()
    
    def _ensure_file_exists(self):
        if not os.path.exists(self.filename):
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'exchange_rate': 12.5,
                    'users': [],
                    'statistics': {
                        'total_calculations': 0,
                        'total_users': 0
                    }
                }, f, ensure_ascii=False, indent=4)
    
    def _read_data(self):
        with open(self.filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def _write_data(self, data):
        with open(self.filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    
    def get_exchange_rate(self):
        data = self._read_data()
        return data.get('exchange_rate', 12.5)
    
    def set_exchange_rate(self, rate):
        data = self._read_data()
        data['exchange_rate'] = float(rate)
        self._write_data(data)
    
    def add_user(self, user_id, username):
        data = self._read_data()
        users = data['users']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        user_exists = any(user['user_id'] == user_id for user in users)
        
        if not user_exists:
            users.append({
                'user_id': user_id,
                'username': username,
                'first_seen': str(datetime.now())
            })
            data['statistics']['total_users'] += 1
            self._write_data(data)
    
    def increment_calculations(self):
        data = self._read_data()
        data['statistics']['total_calculations'] += 1
        self._write_data(data)
    
    def get_statistics(self):
        data = self._read_data()
        return data['statistics']
    
    def get_all_users(self):
        data = self._read_data()
        return data['users']

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_keyboard(user_id=None):
    keyboard = [
        [KeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")],
        [KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    if user_id in ADMIN_IDS:
        keyboard.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def admin_keyboard():
    keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üí± –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å")],
        [KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
def cancel_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = None
    db.add_user(user_id, user.username)
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_keyboard(user_id)
    )

async def send_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instruction_text = (
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö\n"
        "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä:* 100 —é–∞–Ω–µ–π = 1250 —Ä—É–±–ª–µ–π (–ø—Ä–∏ –∫—É—Ä—Å–µ 12.5)\n\n"
        "üöõ–î–æ—Å—Ç–∞–≤–∫–∞:\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: 700‚ÇΩ/–∫–≥\n"
        "‚Ä¢ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 15-20 –¥–Ω–µ–π\n"
        "‚Ä¢ –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: –ö–∏—Ç–∞–π - –¥–æ –¥–≤–µ—Ä–∏ –¥–æ–º–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @MidSaleShop"
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_files = [
        'images/instruction1.jpg',
        'images/instruction2.jpg', 
        'images/instruction3.jpg',
        'images/instruction4.jpg',
        'images/instruction5.jpg',
        'images/instruction6.jpg'
    ]
    
    media_group = []
    photos_found = False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for i, photo_file in enumerate(photo_files):
        try:
            with open(photo_file, 'rb') as photo:
                # –ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                if i == 0:
                    media_group.append(InputMediaPhoto(media=photo, caption=instruction_text))
                else:
                    media_group.append(InputMediaPhoto(media=photo))
                photos_found = True
        except FileNotFoundError:
            logging.warning(f"–§–æ—Ç–æ {photo_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            continue
    
    if photos_found and len(media_group) > 0:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ç–µ–∫—Å—Ç–æ–º
        await update.message.reply_media_group(media=media_group)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard(user_id)
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            instruction_text,
            parse_mode='Markdown',
            reply_markup=main_keyboard(user_id)
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    if user_id in user_states and user_states[user_id] is not None:
        state = user_states[user_id]
        
        if state == "waiting_price":
            await handle_price_input(update, context)
            return
        elif state == "waiting_exchange_rate":
            await handle_exchange_rate_input(update, context)
            return
        elif state == "waiting_broadcast":
            await handle_broadcast_input(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å":
        user_states[user_id] = "waiting_price"
        await update.message.reply_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:",
            reply_markup=cancel_keyboard()
        )
    
    elif text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await send_instruction(update, context)
    
    elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin(user_id):
        await show_admin_panel(update, context)
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard(user_id)
        )
    
    elif text == "üîô –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = None
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_keyboard(user_id) if not is_admin(user_id) else admin_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    elif is_admin(user_id):
        await handle_admin_actions(update, context)

async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = None
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_keyboard(user_id)
        )
        return
    
    try:
        price_yuan = float(text.replace(',', '.'))
        exchange_rate = db.get_exchange_rate()
        price_rubles = price_yuan * exchange_rate
        
        db.increment_calculations()
        
        result_text = (
            f"üíµ **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:**\n\n"
            f"–¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö: {price_yuan} ¬•\n"
            f"–ö—É—Ä—Å: 1 ¬• = {exchange_rate} ‚ÇΩ\n"
            f"**–ò—Ç–æ–≥–æ: {price_rubles:.2f} ‚ÇΩ**\n\n"
            f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏(–ö–∏—Ç–∞–π- –¥–æ –¥–≤–µ—Ä–∏ –î–æ–º–∞): 700‚ÇΩ/–∫–≥ (–û–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)üöõ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 15-20 –¥–Ω–µ–π**\n\n"
            f"**–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è @MidSaleShop **"
        )
        
        user_states[user_id] = None
        await update.message.reply_text(
            result_text,
            parse_mode='Markdown',
            reply_markup=main_keyboard(user_id)
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 99.99",
            reply_markup=cancel_keyboard()
        )

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    admin_text = "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(
        admin_text,
        parse_mode='Markdown',
        reply_markup=admin_keyboard()
    )

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = db.get_statistics()
        exchange_rate = db.get_exchange_rate()
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {stats['total_calculations']}\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {exchange_rate} ‚ÇΩ/¬•"
        )
        
        await update.message.reply_text(
            stats_text,
            parse_mode='Markdown',
            reply_markup=admin_keyboard()
        )
    
    elif text == "üí± –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å":
        user_states[user_id] = "waiting_exchange_rate"
        current_rate = db.get_exchange_rate()
        await update.message.reply_text(
            f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_rate}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.6):",
            reply_markup=cancel_keyboard()
        )
    
    elif text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        user_states[user_id] = "waiting_broadcast"
        await update.message.reply_text(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=cancel_keyboard()
        )
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard(user_id)
        )

async def handle_exchange_rate_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = None
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=admin_keyboard()
        )
        return
    
    try:
        new_rate = float(text.replace(',', '.'))
        db.set_exchange_rate(new_rate)
        
        user_states[user_id] = None
        await update.message.reply_text(
            f"‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_rate}",
            reply_markup=admin_keyboard()
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 12.5 –∏–ª–∏ 12,6",
            reply_markup=cancel_keyboard()
        )

async def handle_broadcast_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = None
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=admin_keyboard()
        )
        return
    
    message = text
    users = db.get_all_users()
    
    success_count = 0
    fail_count = 0
    
    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=f"\n\n{message}"
            )
            success_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            fail_count += 1
    
    user_states[user_id] = None
    await update.message.reply_text(
        f"üì¢ **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {fail_count}",
        reply_markup=admin_keyboard()
    )

def main():
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("BOT_TOKEN=your_bot_token_here")
        print("ADMIN_IDS=123456789,987654321")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('images'):
        os.makedirs('images')
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ 'images' –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üì∏ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–º–µ—Å—Ç–∏—Ç–µ –∏—Ö –≤ –ø–∞–ø–∫—É 'images':")
    print("   - instruction1.jpg")
    print("   - instruction2.jpg") 
    print("   - instruction3.jpg")
    print("   - instruction4.jpg")
    print("   - instruction5.jpg")
    print("   - instruction6.jpg")
    application.run_polling()

if __name__ == '__main__':
    main()